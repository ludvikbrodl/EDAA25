1.
Wide characters and multibyte characters

2.
8 will be printed since when declaring a variable inside the same namespace the first declaration is invisible during the duration of the latter declaration.

3.
an identifier can reference to the same object or function of another file scope by being declared extern. or it can be said that it is a unique identifier for the current scope by being declared as static. Internal linkage is very useful to avoid conflicts between different files (declare us variables as static!). At block scope only identifiers decalted with extern have linkage. others have no linkage and therefor will give a compilation error if declared multiple times.

4.
The action that is performed is called type aliasing and it's meaningless because of ANSI C aliasing rules which prohibits type aliasing to help compilers optimze C code. However there are some exceptions to this called: corresponding integer types which allows for void/char or integers with different sign.

5.
It's stored as 1000 xx....xx 0101 which is is a very large number if unsigned.

6.
integer promotion. When arithemtic operations are performed with types smaller than integer they areautomaticlly "promoted" to integer and perform the values as if both were integers, the value is then recast if necessary. 

7.
struct Data {
	signed int 		a:1;
	unsigned int 	b:1;
	int 			c:1	
};
Since if int has the behaviour of signed or unsigned is compiler specific it can give unexpected behaviours when changings from one compiler to another. Therefor use signed/unsigned specifiers when using bit-field. Sine unsigned and signed differ in their number range it is important to specify.
3 bits signed ->	-4 to +3
3 bits unsigned->	0 to 7

8.
Enums must be representable by an integer, meaning 
#include <limits.h>
enum dogs_t {LABRADOR = INT_MAX, PUDEL}; //invalid since pudel will be int_max + 1.

#define LABRADR = INT_MAX;
#define PUDEL = INT_MAX + 1;